// Example: SSR (Server-Side Rendering)
// This file demonstrates how to use SSR in Next.js
// Rename to index.tsx to use this approach

import { GetServerSideProps } from 'next'
import Menu from '../components/Menu'
import Hero from '../components/Hero'
import PopularToys from '../components/PopularToys'
import DailyAdvice from '../components/DailyAdvice'
import Gallery from '../components/Gallery'
import Footer from '../components/Footer'

// getServerSideProps runs on every request - SSR
export const getServerSideProps: GetServerSideProps = async () => {
  // Fetch data from API or database on each request
  const advice = [
    "You hereby have permission to stop worrying about your checklist—doing the laundry, pumping, buying diapers—and learn to be present with your baby. Enjoy your precious moments together 😊",
    "Expect odd food habits. Offer a variety. Don't push, don't panic. They'll eat when they're hungry 👍"
  ]

  return {
    props: {
      advice
    }
  }
}

interface HomeProps {
  advice: string[]
}

export default function Home({ advice }: HomeProps) {
  return (
    <div className="container">
      <Menu /> {/* CSR - Client side rendered */}
      <Hero /> {/* SSG - Static */}
      <PopularToys /> {/* SSG - Static */}
      <DailyAdvice advice={advice} /> {/* SSR - Server side rendered */}
      <Gallery /> {/* SSG - Static */}
      <Footer /> {/* SSG - Static */}
    </div>
  )
}

// Rendering Strategy Summary:
// - SSR (Server-Side Rendering): DailyAdvice - fresh on every request
// - CSR (Client-Side Rendering): Menu - interactive client components
// - SSG (Static Site Generation): Hero, PopularToys, Gallery, Footer - pre-rendered at build time

